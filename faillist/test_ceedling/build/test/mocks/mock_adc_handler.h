/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_ADC_HANDLER_H
#define _MOCK_ADC_HANDLER_H

#include "adc_handler.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC)
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_adc_handler_Init(void);
void mock_adc_handler_Destroy(void);
void mock_adc_handler_Verify(void);




#define adc_handler__ctor_IgnoreAndReturn(cmock_retval) adc_handler__ctor_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__ctor_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler_Res cmock_to_return);
#define adc_handler__ctor_ExpectAndReturn(me, p_params, cmock_retval) adc_handler__ctor_CMockExpectAndReturn(__LINE__, me, p_params, cmock_retval)
void adc_handler__ctor_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me, const T_ADCHandler_CtorParams* p_params, T_ADCHandler_Res cmock_to_return);
typedef T_ADCHandler_Res (* CMOCK_adc_handler__ctor_CALLBACK)(T_ADCHandler* me, const T_ADCHandler_CtorParams* p_params, int cmock_num_calls);
void adc_handler__ctor_StubWithCallback(CMOCK_adc_handler__ctor_CALLBACK Callback);
#define adc_handler__dtor_Ignore() adc_handler__dtor_CMockIgnore()
void adc_handler__dtor_CMockIgnore(void);
#define adc_handler__dtor_Expect(me) adc_handler__dtor_CMockExpect(__LINE__, me)
void adc_handler__dtor_CMockExpect(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me);
typedef void (* CMOCK_adc_handler__dtor_CALLBACK)(T_ADCHandler* me, int cmock_num_calls);
void adc_handler__dtor_StubWithCallback(CMOCK_adc_handler__dtor_CALLBACK Callback);
#define adc_handler__nominal_mul__get_IgnoreAndReturn(cmock_retval) adc_handler__nominal_mul__get_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__nominal_mul__get_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int16_t cmock_to_return);
#define adc_handler__nominal_mul__get_ExpectAndReturn(me, cmock_retval) adc_handler__nominal_mul__get_CMockExpectAndReturn(__LINE__, me, cmock_retval)
void adc_handler__nominal_mul__get_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const T_ADCHandler* me, int16_t cmock_to_return);
typedef int16_t (* CMOCK_adc_handler__nominal_mul__get_CALLBACK)(const T_ADCHandler* me, int cmock_num_calls);
void adc_handler__nominal_mul__get_StubWithCallback(CMOCK_adc_handler__nominal_mul__get_CALLBACK Callback);
#define adc_handler__nominal_add__get_IgnoreAndReturn(cmock_retval) adc_handler__nominal_add__get_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__nominal_add__get_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int16_t cmock_to_return);
#define adc_handler__nominal_add__get_ExpectAndReturn(me, cmock_retval) adc_handler__nominal_add__get_CMockExpectAndReturn(__LINE__, me, cmock_retval)
void adc_handler__nominal_add__get_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const T_ADCHandler* me, int16_t cmock_to_return);
typedef int16_t (* CMOCK_adc_handler__nominal_add__get_CALLBACK)(const T_ADCHandler* me, int cmock_num_calls);
void adc_handler__nominal_add__get_StubWithCallback(CMOCK_adc_handler__nominal_add__get_CALLBACK Callback);
#define adc_handler__voltage__get_by_counts_value_IgnoreAndReturn(cmock_retval) adc_handler__voltage__get_by_counts_value_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__voltage__get_by_counts_value_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler_Voltage cmock_to_return);
#define adc_handler__voltage__get_by_counts_value_ExpectAndReturn(me, counts_value, cmock_retval) adc_handler__voltage__get_by_counts_value_CMockExpectAndReturn(__LINE__, me, counts_value, cmock_retval)
void adc_handler__voltage__get_by_counts_value_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me, T_ADCHandler_CountsValue counts_value, T_ADCHandler_Voltage cmock_to_return);
typedef T_ADCHandler_Voltage (* CMOCK_adc_handler__voltage__get_by_counts_value_CALLBACK)(T_ADCHandler* me, T_ADCHandler_CountsValue counts_value, int cmock_num_calls);
void adc_handler__voltage__get_by_counts_value_StubWithCallback(CMOCK_adc_handler__voltage__get_by_counts_value_CALLBACK Callback);
#define adc_handler__counts_value__get_by_voltage_IgnoreAndReturn(cmock_retval) adc_handler__counts_value__get_by_voltage_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__counts_value__get_by_voltage_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler_CountsValue cmock_to_return);
#define adc_handler__counts_value__get_by_voltage_ExpectAndReturn(me, voltage, cmock_retval) adc_handler__counts_value__get_by_voltage_CMockExpectAndReturn(__LINE__, me, voltage, cmock_retval)
void adc_handler__counts_value__get_by_voltage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me, T_ADCHandler_Voltage voltage, T_ADCHandler_CountsValue cmock_to_return);
typedef T_ADCHandler_CountsValue (* CMOCK_adc_handler__counts_value__get_by_voltage_CALLBACK)(T_ADCHandler* me, T_ADCHandler_Voltage voltage, int cmock_num_calls);
void adc_handler__counts_value__get_by_voltage_StubWithCallback(CMOCK_adc_handler__counts_value__get_by_voltage_CALLBACK Callback);
#define adc_handler__clb__get_current_IgnoreAndReturn(cmock_retval) adc_handler__clb__get_current_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__clb__get_current_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler_Clb* cmock_to_return);
#define adc_handler__clb__get_current_ExpectAndReturn(me, cmock_retval) adc_handler__clb__get_current_CMockExpectAndReturn(__LINE__, me, cmock_retval)
void adc_handler__clb__get_current_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const T_ADCHandler* me, T_ADCHandler_Clb* cmock_to_return);
typedef const T_ADCHandler_Clb* (* CMOCK_adc_handler__clb__get_current_CALLBACK)(const T_ADCHandler* me, int cmock_num_calls);
void adc_handler__clb__get_current_StubWithCallback(CMOCK_adc_handler__clb__get_current_CALLBACK Callback);
#define adc_handler__clb__get_nominal_IgnoreAndReturn(cmock_retval) adc_handler__clb__get_nominal_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void adc_handler__clb__get_nominal_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, T_ADCHandler_Clb cmock_to_return);
#define adc_handler__clb__get_nominal_ExpectAndReturn(me, cmock_retval) adc_handler__clb__get_nominal_CMockExpectAndReturn(__LINE__, me, cmock_retval)
void adc_handler__clb__get_nominal_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const T_ADCHandler* me, T_ADCHandler_Clb cmock_to_return);
typedef T_ADCHandler_Clb (* CMOCK_adc_handler__clb__get_nominal_CALLBACK)(const T_ADCHandler* me, int cmock_num_calls);
void adc_handler__clb__get_nominal_StubWithCallback(CMOCK_adc_handler__clb__get_nominal_CALLBACK Callback);
#define adc_handler__clb__set_Ignore() adc_handler__clb__set_CMockIgnore()
void adc_handler__clb__set_CMockIgnore(void);
#define adc_handler__clb__set_Expect(me, p_clb) adc_handler__clb__set_CMockExpect(__LINE__, me, p_clb)
void adc_handler__clb__set_CMockExpect(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me, const T_ADCHandler_Clb* p_clb);
typedef void (* CMOCK_adc_handler__clb__set_CALLBACK)(T_ADCHandler* me, const T_ADCHandler_Clb* p_clb, int cmock_num_calls);
void adc_handler__clb__set_StubWithCallback(CMOCK_adc_handler__clb__set_CALLBACK Callback);
#define adc_handler__clb_mul__set_Ignore() adc_handler__clb_mul__set_CMockIgnore()
void adc_handler__clb_mul__set_CMockIgnore(void);
#define adc_handler__clb_mul__set_Expect(me, mul) adc_handler__clb_mul__set_CMockExpect(__LINE__, me, mul)
void adc_handler__clb_mul__set_CMockExpect(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me, int16_t mul);
typedef void (* CMOCK_adc_handler__clb_mul__set_CALLBACK)(T_ADCHandler* me, int16_t mul, int cmock_num_calls);
void adc_handler__clb_mul__set_StubWithCallback(CMOCK_adc_handler__clb_mul__set_CALLBACK Callback);
#define adc_handler__clb_add__set_Ignore() adc_handler__clb_add__set_CMockIgnore()
void adc_handler__clb_add__set_CMockIgnore(void);
#define adc_handler__clb_add__set_Expect(me, add) adc_handler__clb_add__set_CMockExpect(__LINE__, me, add)
void adc_handler__clb_add__set_CMockExpect(UNITY_LINE_TYPE cmock_line, T_ADCHandler* me, int16_t add);
typedef void (* CMOCK_adc_handler__clb_add__set_CALLBACK)(T_ADCHandler* me, int16_t add, int cmock_num_calls);
void adc_handler__clb_add__set_StubWithCallback(CMOCK_adc_handler__clb_add__set_CALLBACK Callback);

#endif
